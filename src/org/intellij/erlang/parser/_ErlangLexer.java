/* The following code was generated by JFlex 1.4.3 on 7/17/12 5:46 PM */

/*** JFlex specification for Erlang ****

     Erlang lexer definition.

     @author Joachim Ansorg, mail@ansorg-it.com
**/

/** Based on the arc lexer (http://code.google.com/p/intelli-arc/) **/

package org.intellij.erlang.parser;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static org.intellij.erlang.ErlangTypes.*;
import static org.intellij.erlang.ErlangParserDefinition.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/17/12 5:46 PM from the specification file
 * <tt>/home/ignatov/src/erlang/src/org/intellij/erlang/parser/Erlang.flex</tt>
 */
public class _ErlangLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\1\1\10\46\1\1\1\5\2\46\1\3\21\46\1\1\1\4\1\70"+
    "\1\24\1\11\1\42\1\2\1\0\1\35\1\71\1\72\1\61\1\60"+
    "\1\75\1\16\1\17\1\62\10\21\2\10\1\67\1\74\1\56\1\66"+
    "\1\57\1\76\1\47\4\12\1\14\1\12\14\6\1\6\7\6\1\36"+
    "\1\20\1\40\1\23\1\22\1\0\1\13\1\25\1\43\1\26\1\15"+
    "\1\27\1\52\1\51\1\53\2\7\1\65\1\63\1\30\1\54\1\7"+
    "\1\44\1\31\1\32\1\33\1\45\1\34\1\50\1\64\1\55\1\7"+
    "\1\37\1\73\1\41\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\2\5\1\10\1\11\1\12\1\1\6\5\1\1\1\13"+
    "\1\14\1\15\1\16\1\1\5\5\1\17\1\20\1\21"+
    "\1\22\1\23\1\5\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\6\2\0\3\5\1\35"+
    "\1\36\1\37\2\0\1\40\13\5\2\0\1\5\2\41"+
    "\3\5\1\42\1\43\1\31\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\5\1\53\1\0\1\54\1\0"+
    "\1\55\1\56\2\6\1\57\1\5\1\60\1\61\1\62"+
    "\1\40\3\5\1\63\1\64\1\65\1\5\1\66\1\67"+
    "\1\70\1\5\1\71\1\72\1\0\1\41\1\0\5\5"+
    "\1\73\1\74\1\75\1\0\2\5\1\76\1\5\1\77"+
    "\1\100\1\5\1\41\1\101\2\5\1\102\1\5\1\57"+
    "\1\0\1\103\1\5\1\104\1\5\1\105\1\106\3\5"+
    "\1\107\1\110\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\275\0\374\0\u013b\0\u017a\0\77"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\374\0\u02b5\0\u02f4\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\77\0\77\0\77"+
    "\0\77\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627"+
    "\0\u0666\0\u06a5\0\77\0\u06e4\0\u0723\0\u0762\0\u07a1\0\77"+
    "\0\77\0\77\0\u07e0\0\77\0\77\0\77\0\u081f\0\u085e"+
    "\0\u089d\0\u08dc\0\u091b\0\u095a\0\77\0\77\0\u0999\0\u02b5"+
    "\0\u09d8\0\77\0\u0a17\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52"+
    "\0\u0b91\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d\0\u046e\0\u0ccc\0\77"+
    "\0\77\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u013b\0\u013b\0\u0e07"+
    "\0\77\0\77\0\77\0\77\0\77\0\77\0\77\0\u0e46"+
    "\0\77\0\u0e85\0\77\0\u0ec4\0\77\0\77\0\u0f03\0\u085e"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u013b\0\77\0\u02b5\0\u0fff\0\u103e"+
    "\0\u107d\0\u013b\0\u013b\0\u013b\0\u10bc\0\u013b\0\u013b\0\u013b"+
    "\0\u10fb\0\u013b\0\u013b\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236"+
    "\0\u1275\0\u12b4\0\u12f3\0\u013b\0\77\0\77\0\u1332\0\u1371"+
    "\0\u13b0\0\u013b\0\u13ef\0\u013b\0\u013b\0\u142e\0\u146d\0\u013b"+
    "\0\u14ac\0\u14eb\0\u013b\0\u152a\0\u1569\0\u1569\0\u013b\0\u15a8"+
    "\0\u013b\0\u15e7\0\u013b\0\u013b\0\u1626\0\u1665\0\u16a4\0\u013b"+
    "\0\u013b\0\u013b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int ZZ_TRANS [] = {
    1, 2, 3, 1, 2, 2, 4, 5, 6, 7, 
    4, 8, 4, 9, 10, 11, 1, 6, 12, 1, 
    13, 14, 15, 16, 17, 18, 5, 19, 5, 20, 
    21, 22, 23, 24, 25, 26, 27, 5, 1, 1, 
    28, 5, 5, 29, 30, 5, 31, 32, 33, 34, 
    35, 5, 36, 5, 37, 38, 39, 40, 41, 42, 
    43, 44, 45, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, 
    2, 2, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 
    3, 3, -1, 3, -1, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
    3, 3, -1, -1, -1, -1, -1, -1, 4, 4, 
    4, -1, 4, 4, 4, 4, -1, -1, -1, 4, 
    4, -1, -1, 4, 4, 4, 4, 4, 4, 4, 
    4, -1, -1, -1, -1, -1, -1, 4, 4, 4, 
    -1, 4, 4, 4, 4, 4, 4, 4, -1, -1, 
    -1, -1, -1, 4, 4, 4, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 5, -1, 
    -1, -1, 5, 5, -1, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 46, 47, -1, -1, 
    -1, -1, -1, 48, -1, 46, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, 49, 50, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, -1, -1, 
    -1, 5, 5, -1, -1, 5, 5, 5, 51, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 52, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 55, -1, 55, -1, 55, 55, 55, 
    55, 55, 55, 55, 55, 55, 55, 55, 55, 56, 
    55, 55, 55, 57, 55, 55, 55, 55, 55, 55, 
    55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
    55, -1, 55, 55, 55, 55, 55, 55, 55, 55, 
    55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
    55, 55, 55, 55, 55, 55, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 58, 5, 59, 
    -1, -1, -1, 5, 5, -1, -1, 5, 5, 5, 
    60, 5, 61, 5, 5, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 5, 5, 
    62, 5, -1, -1, -1, -1, -1, 5, 63, 5, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, 5, 
    5, 5, 5, -1, -1, -1, 5, 5, -1, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, 64, 5, 5, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, -1, -1, -1, 5, 
    5, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, 5, 5, 65, 
    -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 5, -1, 
    -1, -1, 5, 5, -1, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, 5, 66, 
    5, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 67, -1, -1, -1, 5, 5, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, 5, 5, 68, 5, 5, 5, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 69, 69, 69, 69, 69, 69, 
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
    70, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
    69, 69, 69, 71, 69, 69, 69, 69, 69, 69, 
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
    69, 69, 69, 69, 69, 69, 69, 72, 72, 72, 
    72, 72, -1, 72, 72, 72, 72, 72, 72, 72, 
    72, 72, 72, 73, 72, 72, 72, 72, 72, 72, 
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 74, 5, 5, -1, -1, -1, 5, 5, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, -1, -1, -1, 
    5, 5, -1, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, 5, 5, 
    75, -1, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 5, 5, 5, 
    -1, -1, -1, 5, 5, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 76, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, 5, 
    5, 5, 5, -1, -1, -1, 5, 5, -1, -1, 
    5, 5, 77, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, -1, -1, -1, 5, 
    5, -1, -1, 5, 5, 78, 5, 79, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 80, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 81, -1, -1, -1, -1, -1, -1, -1, 82, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 83, -1, -1, -1, -1, 
    -1, -1, 84, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, -1, -1, -1, 5, 5, -1, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 5, 5, 5, 
    5, 87, 5, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 88, -1, -1, -1, 
    89, -1, -1, -1, 90, 91, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 92, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 93, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 94, 47, -1, 
    -1, -1, -1, -1, 48, -1, 94, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    95, -1, 95, 95, 95, 95, -1, -1, -1, 95, 
    -1, -1, -1, 95, 95, 95, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 95, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 96, -1, -1, -1, -1, -1, -1, 
    -1, -1, 96, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, -1, -1, -1, 5, 5, -1, -1, 5, 
    5, 5, 5, 5, 5, 97, 5, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, -1, -1, -1, 5, 5, 
    -1, -1, 5, 98, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, -1, -1, 
    -1, 5, 5, -1, -1, 5, 99, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 100, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    55, -1, 55, -1, 55, 55, 55, 55, 55, 55, 
    55, 55, 55, 55, 55, 55, 56, 55, 55, 55, 
    101, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
    55, 55, 55, 55, 55, 55, 55, 55, -1, 55, 
    55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
    55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 
    55, 55, 55, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, -1, -1, -1, 
    5, 5, -1, -1, 5, 5, 5, 102, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 5, 5, 5, 
    -1, -1, -1, 5, 5, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 103, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, 5, 
    5, 5, 5, -1, -1, -1, 5, 5, -1, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, 5, 104, 5, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, -1, -1, -1, 5, 
    5, -1, -1, 5, 5, 5, 5, 105, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 106, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 5, -1, 
    -1, -1, 5, 5, -1, -1, 5, 5, 5, 5, 
    107, 5, 5, 5, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, -1, -1, -1, 5, 5, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, 5, 108, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, 5, 5, 5, 5, 5, 109, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, -1, -1, 
    -1, 5, 5, -1, -1, 5, 5, 5, 110, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, -1, -1, -1, 5, 5, -1, -1, 5, 5, 
    5, 5, 5, 5, 111, 5, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 5, -1, -1, -1, 5, 5, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, 112, 5, 5, -1, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 113, 5, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, -1, -1, -1, 
    5, 5, -1, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, 5, 5, 114, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 
    -1, -1, 69, 69, -1, 115, 69, 69, 69, 69, 
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 72, -1, -1, 72, 116, -1, 117, 72, 
    72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 
    72, 72, 72, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, -1, -1, -1, 5, 
    5, -1, -1, 5, 5, 5, 5, 5, 118, 119, 
    5, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 120, -1, 
    -1, -1, 5, 5, -1, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 121, -1, -1, -1, 5, 5, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 122, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, -1, -1, 
    -1, 5, 5, -1, -1, 5, 5, 5, 5, 123, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 124, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 125, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 94, -1, -1, -1, -1, -1, -1, 48, -1, 
    94, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 96, -1, -1, -1, 126, 126, 
    -1, -1, -1, 96, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, 5, 
    5, 5, 127, -1, -1, -1, 5, 5, -1, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 128, 5, 5, -1, -1, -1, 5, 
    5, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 5, -1, 
    -1, -1, 5, 5, -1, -1, 5, 129, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, -1, -1, -1, 5, 5, -1, -1, 5, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, 130, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, 5, 5, 5, 5, 131, 5, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, -1, -1, 
    -1, 5, 5, -1, -1, 5, 5, 5, 5, 132, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    133, -1, -1, -1, 5, 5, -1, -1, 5, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 69, -1, -1, -1, 
    69, -1, 69, -1, -1, -1, 69, -1, 69, 69, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    69, -1, 69, -1, -1, -1, -1, -1, -1, 69, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    134, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 72, -1, -1, -1, 72, -1, 72, -1, 
    -1, -1, 72, -1, 72, 72, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 72, -1, 72, -1, 
    -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, 5, 
    5, 5, 135, -1, -1, -1, 5, 5, -1, -1, 
    5, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, -1, -1, -1, 5, 
    5, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, 136, 5, 5, 
    -1, 5, 5, 5, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 5, -1, 
    -1, -1, 5, 5, -1, -1, 5, 5, 5, 5, 
    137, 5, 5, 5, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, -1, -1, -1, 5, 5, -1, -1, 5, 
    5, 5, 138, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 5, 5, -1, -1, -1, 5, 5, 
    -1, -1, 5, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 5, 5, 5, 5, -1, -1, -1, 
    -1, -1, 5, 5, 139, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 140, -1, -1, -1, -1, -1, 141, -1, 
    -1, 140, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 141, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, -1, -1, -1, 5, 5, -1, -1, 5, 5, 
    5, 5, 142, 5, 5, 5, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 5, -1, -1, -1, 5, 5, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 143, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, -1, -1, -1, 
    5, 5, -1, -1, 5, 5, 5, 144, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 5, 5, 5, 
    -1, -1, -1, 5, 5, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 5, 145, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 72, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, -1, -1, -1, 5, 
    5, -1, -1, 5, 5, 5, 5, 5, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, 5, 5, 146, 5, 5, 5, 5, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 5, -1, 
    -1, -1, 5, 5, -1, -1, 5, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, 5, 5, 
    147, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, 5, 5, 
    5, 5, -1, -1, -1, 5, 5, -1, -1, 5, 
    5, 5, 5, 5, 148, 5, 5, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, 5, 5, 5, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 140, 
    -1, -1, -1, -1, -1, -1, -1, -1, 140, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    5, 5, 5, -1, 5, 5, 5, 5, -1, -1, 
    -1, 5, 5, -1, -1, 5, 5, 5, 5, 5, 
    149, 5, 5, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, 5, 5, 5, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, 5, 5, 5, -1, 5, 5, 5, 
    5, -1, -1, -1, 5, 5, -1, -1, 5, 5, 
    5, 5, 5, 5, 5, 150, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 5, 5, 5, 
    5, 5, 5, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, 5, 5, 5, -1, 
    5, 5, 5, 151, -1, -1, -1, 5, 5, -1, 
    -1, 5, 5, 5, 5, 5, 5, 5, 5, -1, 
    -1, -1, -1, -1, -1, 5, 5, 5, -1, 5, 
    5, 5, 5, 5, 5, 5, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, -1, -1, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 
    5, 5, -1, 5, 5, 5, 5, -1, -1, -1, 
    5, 5, -1, -1, 5, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, -1, 5, 5, 
    5, -1, 5, 5, 5, 5, 5, 152, 5, -1, 
    -1, -1, -1, -1, 5, 5, 5, -1, -1, -1, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
    -1, -1, 5, 5, 5, -1, 5, 5, 5, 153, 
    -1, -1, -1, 5, 5, -1, -1, 5, 5, 5, 
    5, 5, 5, 5, 5, -1, -1, -1, -1, -1, 
    -1, 5, 5, 5, -1, 5, 5, 5, 5, 5, 
    5, 5, -1, -1, -1, -1, -1, 5, 5, 5, 
    -1, -1, -1, -1, -1, -1, -1, -1, -1, 
  };

  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\15\1\4\11\11\1\1\11"+
    "\4\1\3\11\1\1\3\11\1\1\2\0\3\1\2\11"+
    "\1\1\2\0\1\11\13\1\2\0\2\11\7\1\7\11"+
    "\1\1\1\11\1\0\1\11\1\0\2\11\6\1\1\11"+
    "\16\1\1\0\1\1\1\0\6\1\2\11\1\0\16\1"+
    "\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[154];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  public _ErlangLexer() {
    this((java.io.Reader)null);
  }


  public _ErlangLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _ErlangLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 148) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return ERL_COMMENT;
          }
        case 74: break;
        case 16: 
          { return ERL_OP_GT;
          }
        case 75: break;
        case 72: 
          { return ERL_ANDALSO;
          }
        case 76: break;
        case 44: 
          { return ERL_OP_EQ_EQ;
          }
        case 77: break;
        case 39: 
          { return ERL_BIN_END;
          }
        case 78: break;
        case 49: 
          { return ERL_END;
          }
        case 79: break;
        case 32: 
          { return ERL_STRING;
          }
        case 80: break;
        case 47: 
          { return ERL_FLOAT;
          }
        case 81: break;
        case 73: 
          { return ERL_RECEIVE;
          }
        case 82: break;
        case 63: 
          { return ERL_BNOT;
          }
        case 83: break;
        case 19: 
          { return ERL_OP_AR_DIV;
          }
        case 84: break;
        case 13: 
          { return ERL_BRACKET_RIGHT;
          }
        case 85: break;
        case 12: 
          { return ERL_CURLY_LEFT;
          }
        case 86: break;
        case 31: 
          { return ERL_DOT_DOT;
          }
        case 87: break;
        case 28: 
          { return ERL_QMARK;
          }
        case 88: break;
        case 57: 
          { return ERL_REM;
          }
        case 89: break;
        case 55: 
          { return ERL_FUN;
          }
        case 90: break;
        case 71: 
          { return ERL_ORELSE;
          }
        case 91: break;
        case 2: 
          { return com.intellij.psi.TokenType.WHITE_SPACE;
          }
        case 92: break;
        case 59: 
          { return ERL_XOR;
          }
        case 93: break;
        case 54: 
          { return ERL_DIV;
          }
        case 94: break;
        case 14: 
          { return ERL_CURLY_RIGHT;
          }
        case 95: break;
        case 29: 
          { return ERL_OP_MINUS_MINUS;
          }
        case 96: break;
        case 6: 
          { return ERL_INTEGER;
          }
        case 97: break;
        case 61: 
          { return ERL_OP_EQ_COL_EQ;
          }
        case 98: break;
        case 66: 
          { return ERL_WHEN;
          }
        case 99: break;
        case 68: 
          { return ERL_BEGIN;
          }
        case 100: break;
        case 43: 
          { return ERL_OP_EQ_LT;
          }
        case 101: break;
        case 60: 
          { return ERL_OP_EQ_DIV_EQ;
          }
        case 102: break;
        case 30: 
          { return ERL_ARROW;
          }
        case 103: break;
        case 9: 
          { return ERL_DOT;
          }
        case 104: break;
        case 8: 
          { return ERL_OP_MINUS;
          }
        case 105: break;
        case 62: 
          { return ERL_BAND;
          }
        case 106: break;
        case 45: 
          { return ERL_COLON_COLON;
          }
        case 107: break;
        case 52: 
          { return ERL_BSL;
          }
        case 108: break;
        case 21: 
          { return ERL_COLON;
          }
        case 109: break;
        case 26: 
          { return ERL_SEMI;
          }
        case 110: break;
        case 70: 
          { return ERL_QUERY;
          }
        case 111: break;
        case 33: 
          { return ERL_CHAR;
          }
        case 112: break;
        case 51: 
          { return ERL_BSR;
          }
        case 113: break;
        case 20: 
          { return ERL_OP_EQ;
          }
        case 114: break;
        case 42: 
          { return ERL_OP_DIV_EQ;
          }
        case 115: break;
        case 22: 
          { return ERL_OP_EXL;
          }
        case 116: break;
        case 38: 
          { return ERL_OP_LT_EQ;
          }
        case 117: break;
        case 23: 
          { return ERL_PAR_LEFT;
          }
        case 118: break;
        case 5: 
          { return ERL_ATOM;
          }
        case 119: break;
        case 18: 
          { return ERL_OP_AR_MUL;
          }
        case 120: break;
        case 41: 
          { return ERL_OP_PLUS_PLUS;
          }
        case 121: break;
        case 4: 
          { return ERL_VAR;
          }
        case 122: break;
        case 56: 
          { return ERL_NOT;
          }
        case 123: break;
        case 53: 
          { return ERL_BOR;
          }
        case 124: break;
        case 46: 
          { return ERL_OR_OR;
          }
        case 125: break;
        case 64: 
          { return ERL_BXOR;
          }
        case 126: break;
        case 35: 
          { return ERL_OF;
          }
        case 127: break;
        case 27: 
          { return ERL_COMMA;
          }
        case 128: break;
        case 69: 
          { return ERL_CATCH;
          }
        case 129: break;
        case 25: 
          { return ERL_OR;
          }
        case 130: break;
        case 40: 
          { return ERL_OP_GT_EQ;
          }
        case 131: break;
        case 67: 
          { return ERL_AFTER;
          }
        case 132: break;
        case 17: 
          { return ERL_OP_PLUS;
          }
        case 133: break;
        case 36: 
          { return ERL_OP_LT_MINUS;
          }
        case 134: break;
        case 1: 
          { return com.intellij.psi.TokenType.BAD_CHARACTER;
          }
        case 135: break;
        case 11: 
          { return ERL_BRACKET_LEFT;
          }
        case 136: break;
        case 24: 
          { return ERL_PAR_RIGHT;
          }
        case 137: break;
        case 15: 
          { return ERL_OP_LT;
          }
        case 138: break;
        case 37: 
          { return ERL_BIN_START;
          }
        case 139: break;
        case 10: 
          { return ERL_UNI_PATTERN;
          }
        case 140: break;
        case 7: 
          { return ERL_RADIX;
          }
        case 141: break;
        case 65: 
          { return ERL_CASE;
          }
        case 142: break;
        case 34: 
          { return ERL_IF;
          }
        case 143: break;
        case 58: 
          { return ERL_TRY;
          }
        case 144: break;
        case 50: 
          { return ERL_DOT_DOT_DOT;
          }
        case 145: break;
        case 48: 
          { return ERL_AND;
          }
        case 146: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
